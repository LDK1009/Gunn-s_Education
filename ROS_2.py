import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

# 이미지 파일을 열고 이미지 객체를 'pic' 변수에 저장합니다.
pic = Image.open('./ImgSample.jpg')

# 'pic' 이미지를 NumPy 배열로 변환합니다. 이렇게 하면 이미지 데이터를 배열 형태로 다룰 수 있습니다.
pic_arr = np.asarray(pic)

# 이미지 배열의 모양(높이, 너비, 채널 수)을 'pic_shape' 변수에 저장합니다.
pic_shape = pic_arr.shape

# 원본 이미지 배열을 복사하여 'pic_red' 변수에 저장합니다.
pic_copy = pic_arr.copy()

# 이미지를 출력하는 함수입니다. 여기서는 이미지의 초록색 채널을 'Reds' 색상 맵으로 출력합니다.
plt.imshow(pic_copy[:, :, 1], cmap='Reds')
plt.show()

# 'pic_copy' 배열의 초록색 채널을 0으로 설정합니다. 즉, 초록색 채널을 제거합니다.
pic_copy[:, :, 1] = 0

# 초록색 채널을 제거한 이미지를 출력합니다.
plt.imshow(pic_copy)
plt.show()

# 'pic_copy' 배열의 파란색 채널을 0으로 설정합니다. 즉, 파란색 채널을 제거합니다.
pic_copy[:, :, 2] = 0

# 초록색과 파란색 채널이 제거된 이미지를 출력합니다.
plt.imshow(pic_copy)
plt.show()

#

'''
예시로 사용할 3차원 배열
arr3d = np.array([
    [[1, 2, 3], [4, 5, 6], [7, 8, 9]],
    [[10, 11, 12], [13, 14, 15], [16, 17, 18]],
    [[19, 20, 21], [22, 23, 24], [25, 26, 27]]
])
'''

'''
1. 파이썬의 다차원 배열 접근 방법
기존 언어에서는 깊이:0, 행:2, 열:2 요소에 접근하기 위해서는 아래와 같은 코드를 작성해야한다.
arr[0][2][2] => 9

하지만 파이썬에서는 arr[0,2,2] 와 같은 방식으로 접근이 가능하다.
즉, 파이썬은 콤마(,)를 통해 깊이, 행, 열에 접근이 가능하다.
해당 개념을 통해 다차원 배열 슬라이싱에 대해 이해할 수 있다.
'''

'''
2. 다차원 배열 슬라이싱

예제1. 첫 번째 깊이의 두 번째 행의 전체 열 선택
print(arr3d[0, 1, :])  # 출력: [4 5 6]

예제2. 두 번째 깊이의 세 번째 열의 전체 행 선택
print(arr3d[1, :, 2])  # 출력: [12 15 18]

예제3. 세 번째 깊이의 두 번째 행의 두 번째부터 세 번째 열 선택
print(arr3d[2, 1, 1:3])  # 출력: [23 24]


예제4. 
# 깊이 0~2를 스텝 2로 추출(첫번째, 세번째 깊이만 추출),
# 모든 행을 스탭 2로 추출(첫번째, 세번째 행만 추출),
# 모든 열을 추출,

print(arr3d[0:2:2, ::2, :])
# 출력 :
[
    [[1, 2, 3], [7, 8, 9]],
    [[19, 20, 21], [25, 26, 27]]
]
'''

'''
3. 다차원 배열 슬라이싱 활용
아래는 5*5 크기의 간단한 컬러 이미지의 3차원 배열 값이다.
깊이는 이미지의 행, 행은 이미지의 열, 열은 이미지 픽셀의 RGB값을 나타낸다.

pic_arr = np.array([
    [[  4,  89,  34], [ 88,  73, 202], [ 61,  76,  25], [113, 135, 143], [ 98,  40,  18]],
    [[202, 160,  66], [ 98, 133,  76], [ 84,  11,  95], [ 75, 246, 238], [ 22,  60, 151]],
    [[134,  89, 204], [116,  84,  53], [ 54, 163, 242], [ 73,  60,  32], [ 67, 141, 223]],
    [[243, 102, 159], [144, 155, 177], [130, 186,  32], [226,  88, 128], [ 69,  69, 162]],
    [[ 22,  90, 226], [ 96,  84,  92], [ 83,  15, 240], [ 76, 250, 141], [  6,  25,  46]]
])

5*5 이미지중 가운데 3*3 픽셀의 R값을 모두 가져와보자.
아래는 5*5 픽셀 중 가져올 픽셀을 1로 표시한 행렬이다.
00000
01110
01110
01110
00000

3*3 픽셀의 Red값을 가져오기 위해서는 아래 과정을 따라야한다. (여기서 숫자는 배열의 인덱스를 의미한다.)
1. 깊이 1~3을 가져온다. 
코드 : pic_arr[1:4, ?, ?] 
[
[[202, 160,  66], [ 98, 133,  76], [ 84,  11,  95], [ 75, 246, 238], [ 22,  60, 151]],
[[134,  89, 204], [116,  84,  53], [ 54, 163, 242], [ 73,  60,  32], [ 67, 141, 223]],
[[243, 102, 159], [144, 155, 177], [130, 186,  32], [226,  88, 128], [ 69,  69, 162]],
]

2. 깊이 1~3중 행 1~3을 가져온다.
코드 : pic_arr[1:4, , 1:4, ?] 
[
[ 98, 133,  76], [ 84,  11,  95], [ 75, 246, 238],
[116,  84,  53], [ 54, 163, 242], [ 73,  60,  32],
[144, 155, 177], [130, 186,  32], [226,  88, 128],
]

3. 깊이 1~3, 행 1~3 의 0열을 가져온다
코드 : pic_arr[1:4, , 1:4, 0]
[
[98, 84, 75]
[116, 54, 73]
[144, 130, 226]
]

4. 해당 픽셀들의 Red 값을 모두 0으로 바꾼다.
코드 : pic_arr[1:4, , 1:4, 0] = 0
[
[0, 84, 75]
[0, 54, 73]
[0, 130, 226]
]
'''
